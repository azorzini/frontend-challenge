{"version":3,"sources":["redux/selectedPostSlice.js","redux/allPostsSlice.js","components/PostListItem.jsx","utils/index.js","components/PostList.jsx","components/PostDetails.jsx","hooks/usePrevious.js","hooks/usePosts.js","components/ResponsiveDrawer.jsx","App.js","serviceWorker.js","redux/rootReducer.jsx","redux/store.js","index.js","assets/images/reddit.png"],"names":["selectedPostSlice","createSlice","name","initialState","reducers","selectPost","state","action","payload","selectedPostReducer","reducer","actions","AllPostsSlice","addPosts","map","p","read","dismissed","dismissPosts","dismissSinglePost","find","post","data","id","markAsRead","allPostsReducer","ReadTitle","styled","span","ListItemWrapper","div","thumbnailTypes","PostListItem","forwardRef","ref","title","thumbnail","author","created_utc","dispatch","useDispatch","creationDate","time","fromUnixTime","timePast","formatDistanceStrict","Date","now","roundingMethod","getFormattedCreationDate","hasDefaultThumbnails","includes","selectedPost","useSelector","allPosts","ListItem","button","onClick","alignItems","ListItemAvatar","Avatar","alt","src","defaultThumbnail","ListItemText","primary","secondary","ListItemSecondaryAction","Tooltip","IconButton","has","color","edge","aria-label","Clear","Divider","variant","component","StyledList","List","StyledListItem","Loading","CircularProgress","PostList","posts","setAfterTag","loading","error","lastElementRef","useRef","useEffect","lastElement","current","observer","IntersectionObserver","entries","isIntersecting","last","observe","unobserve","i","length","key","StyledImg","img","Content","post_hint","selftext","url","secure_media","preview","fallback_url","reddit_video_preview","reddit_video","className","controls","autoPlay","loop","type","StyledTypography","Typography","SelectPostDetails","CenteredTextCard","CardHeader","PostDetails","subreddit_name_prefixed","num_comments","score","Container","Grid","container","direction","justify","Card","subheader","StyledCardMedia","CardContent","CardMedia","usePrevious","value","usePosts","after","useState","setLoading","setError","previousAfterTag","loadPosts","useCallback","a","searchParams","URLSearchParams","limit","set","axios","method","toString","response","children","isCancel","useStyles","makeStyles","theme","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","display","toolbar","minWidth","mixins","drawerPaper","content","flexGrow","padding","ResponsiveDrawer","props","afterTag","window","classes","useTheme","React","mobileOpen","setMobileOpen","handleDrawerToggle","undefined","document","body","RootDiv","root","CssBaseline","AppBar","position","Toolbar","Menu","noWrap","StyledButton","disabled","every","Button","Hidden","smUp","implementation","Drawer","anchor","open","onClose","paper","xsDown","flex","App","Boolean","location","hostname","match","rootReducer","combineReducers","store","configureStore","rootElement","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"uUAEMA,EAAoBC,YAAY,CACpCC,KAAM,eACNC,aAAc,GACdC,SAAU,CACRC,WAAY,SAACC,EAAOC,GAClB,OAAOA,EAAOC,YAMTC,EAEPT,EAFFU,QACWL,EACTL,EADFW,QAAWN,W,gBCZPO,EAAgBX,YAAY,CAChCC,KAAM,WACNC,aAAc,GACdC,SAAU,CACRS,SAAU,SAACP,EAAOC,GAChB,MAAM,GAAN,mBAAWD,GAAX,YAAqBC,EAAOC,QAAQM,KAAI,SAAAC,GAAC,kCAAUA,GAAV,IAAaC,MAAM,EAAOC,WAAW,UAEhFC,aAAc,SAACZ,GACb,MAAO,IAETa,kBAAmB,SAACb,EAAOC,GACHD,EAAMc,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,KAAOhB,EAAOC,WACnDS,WAAY,GAE5BO,WAAY,SAAClB,EAAOC,GACDD,EAAMc,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,KAAOhB,EAAOC,WACnDQ,MAAO,MAMXS,EAEPb,EAFFF,Q,EAEEE,EADFD,QAAWE,E,EAAAA,SAAUK,E,EAAAA,aAAcM,E,EAAAA,WAAYL,E,EAAAA,kB,iQCdjD,IAAMO,EAAYC,IAAOC,KAAV,KAITC,EAAkBF,IAAOG,IAAV,KAEL,qBAAEb,UAA2B,EAAI,OAI3Cc,EAAiB,CAAC,UAAW,OAAQ,UAAW,QA6DvCC,EA3DMC,sBAAW,WAW3BC,GAAS,IAAD,IAXsBb,KAWtB,IAVPC,KACEC,EASK,EATLA,GACAY,EAQK,EARLA,MACAC,EAOK,EAPLA,UACAC,EAMK,EANLA,OACAC,EAKK,EALLA,YAEFtB,EAGO,EAHPA,KACAC,EAEO,EAFPA,UAGEsB,EAAWC,cACXC,EClCgC,SAACC,GACvC,IAAMD,EAAeE,YAAaD,GAC5BE,EAAWC,YAAqBJ,EAAcK,KAAKC,MAAO,CAC9DC,eAAgB,UAElB,MAAM,GAAN,OAAUJ,EAAV,QD6BqBK,CAAyBX,GACxCY,EAAuBnB,EAAeoB,SAASf,GAC/CgB,EAAeC,aAAY,SAAA/C,GAAK,OAAIA,EAAMgD,SAASlC,MAAK,SAAAL,GAC5D,OAAOA,EAAEO,KAAKC,KAAOjB,EAAM8C,mBAa7B,OACI,kBAACvB,EAAD,CAAiBZ,UAAWA,GAC1B,kBAACsC,EAAA,EAAD,CAAUrB,IAAKA,EAAKsB,QAAM,EAACC,QAbP,WACxBlB,EAASlC,EAAWkB,IACpBgB,EAASf,EAAWD,KAWuCmC,WAAW,cAChE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAI,YAAYC,IAAKZ,EAAuBa,IAAmB3B,KAGzE,kBAAC4B,EAAA,EAAD,CACEC,QACGjD,EAAO,kBAACU,EAAD,KAAYS,GAAqBA,EAE3C+B,UACE,0CACK,gCAAM7B,GADX,IACwBI,KAI5B,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASjC,MAAM,WACb,kBAACkC,EAAA,EAAD,CAAYZ,QA1BE,WACrBa,cAAIlB,EAAc,YAAcA,EAAa9B,KAAKC,KAAOA,GAC1DgB,EAASlC,EAAW,OAEtBkC,EAASpB,EAAkBI,KAsBuBgD,MAAM,YAAYC,KAAK,MAAMC,aAAW,UAC9E,kBAACC,EAAA,EAAD,UAKR,kBAACC,EAAA,EAAD,CAASC,QAAQ,QAAQC,UAAU,W,qMEvE3C,IAAMC,EAAanD,YAAOoD,IAAPpD,CAAH,KAIVqD,EAAiBrD,YAAO4B,IAAP5B,CAAH,KAIdsD,EAAU,kBACd,kBAACD,EAAD,CAAgBtB,WAAW,UACzB,kBAACwB,EAAA,EAAD,QA+CWC,EA3CE,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAExCC,EAAiBC,mBAsBvB,OApBAC,qBAAU,WACR,IAAIJ,EAAJ,CACA,IAAMK,EAAcH,EAAeI,QACnC,GAAKD,EAAL,CAEA,IAAME,EAAY,IAAIC,sBAAqB,SAAAC,GACrCA,EAAQ,GAAGC,gBACbX,EAAYY,eAAKb,GAAO9D,KAAKpB,SAMjC,OAFA2F,EAASK,QAAQV,EAAeI,SAEzB,WACAD,GACLE,EAASM,UAAUR,QAGrB,CAACL,EAASF,EAAOC,IAGjB,kBAACP,EAAD,KACGM,EAAMtE,KAAI,SAACO,EAAM+E,GAChB,OAAIhB,EAAMiB,SAAWD,EAAI,EAErB,kBAAC,EAAD,CAAcE,IAAKjF,EAAKC,KAAKC,GAAIW,IAAKsD,EAAgBnE,KAAMA,IAGvD,kBAAC,EAAD,CAAciF,IAAKjF,EAAKC,KAAKC,GAAIF,KAAMA,OAGlD,6BAAMiE,GAAW,kBAAC,EAAD,OAEjB,6BAAMC,GAAS,W,qiBC7CrB,IAAMgB,GAAY5E,IAAO6E,IAAV,MAMTC,GAAU,SAAC,GAAc,IAAD,QAAXpF,KAEuDC,KAAhEoF,EAFoB,EAEpBA,UAAWC,EAFS,EAETA,SAAUxE,EAFD,EAECA,MAAOyE,EAFR,EAEQA,IAAKC,EAFb,EAEaA,aAAcC,EAF3B,EAE2BA,QAEvD,OAAQJ,GACN,IAAK,QACH,OAAO,kBAACH,GAAD,CAAWzC,IAAK8C,EAAK/C,IAAK1B,IACnC,IAAK,eACL,IAAK,OACL,IAAK,aAAL,IACU4E,GADV,2BAC2BD,QAD3B,IAC2BA,OAD3B,EAC2BA,EAASE,4BADpC,eAEEH,QAFF,IAEEA,OAFF,EAEEA,EAAcI,oBAFhB,QAEgC,CAAEF,aAAc,OADtCA,aAER,OAAKA,EAGH,yBAAKG,UAAU,0CACb,2BAAOC,UAAQ,EAACC,UAAQ,EAACC,MAAI,EAACH,UAAU,yBACtC,4BAAQpD,IAAKiD,EAAcO,KAAK,gBAJ7B,kBAACC,GAAD,kDAQX,QACE,OAAO,oCAAG,kBAACC,EAAA,EAAD,KAAab,MAIvBc,GAAoB,WACxB,OACE,kBAACC,GAAD,KACE,kBAACC,EAAA,EAAD,CACExF,MAAO,mCAuCAyF,GAhCK,SAAC,GAAY,IAAXvG,EAAU,EAAVA,KACpB,IAAIA,EAAM,OAAO,kBAAC,GAAD,MADa,MAG0CA,EAAKC,KAArEa,EAHsB,EAGtBA,MAAO0F,EAHe,EAGfA,wBAAyBxF,EAHV,EAGUA,OAAQyF,EAHlB,EAGkBA,aAAcC,EAHhC,EAGgCA,MAE9D,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACR1E,WAAW,UAEX,kBAAC2E,GAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CACExF,MAAOA,EACPmG,UAAS,UAAKT,EAAL,sBAA0CxF,KAErD,kBAACkG,GAAD,KACE,kBAAC,GAAD,CAASlH,KAAMA,KAEjB,kBAACmH,GAAA,EAAD,KACE,kBAAChB,EAAA,EAAD,CAAY5C,QAAQ,QAAQL,MAAM,cAAcM,UAAU,KAA1D,QACO,gCAASiD,GADhB,4BAC+D,gCAASC,SAW9EQ,GAAkB5G,YAAO8G,KAAP9G,CAAH,MAKf4F,GAAmB5F,YAAO6F,IAAP7F,CAAH,MAKhB+F,GAAmB/F,YAAO0G,KAAP1G,CAAH,M,4JCvFP+G,GAVK,SAAAC,GAClB,IAAMzG,EAAMuD,mBAMZ,OAJAC,qBAAU,WACVxD,EAAI0D,QAAU+C,IACb,CAACA,IAEKzG,EAAI0D,SCuCEgD,GA1CE,SAACC,GAAW,IAAD,EACIC,oBAAS,GADb,oBACnBxD,EADmB,KACVyD,EADU,OAEAD,oBAAS,GAFT,oBAEnBvD,EAFmB,KAEZyD,EAFY,KAGpBC,EAAmBP,GAAYG,GAC/BzD,EAAQ/B,aAAY,SAAA/C,GAAK,OAAIA,EAAMgD,YACnCF,EAAeC,aAAY,SAAA/C,GAAK,OAAIA,EAAMgD,SAASlC,MAAK,SAAAL,GAC1D,OAAOA,EAAEO,KAAKC,KAAOjB,EAAM8C,mBAIzBb,EAAWC,cAEX0G,EAAYC,sBAAW,wBAAC,+BAAAC,EAAA,6DACtBC,EAAe,IAAIC,gBAAgB,CACvCC,MAAO,OAELV,GACFQ,EAAaG,IAAI,QAASX,GALA,SAQ1BE,GAAW,GACXC,GAAS,GATiB,SAUHS,KAAM,CAC3BC,OAAQ,MACR9C,IAAI,mCAAD,OAAqCyC,EAAaM,cAZ7B,OAUpBC,EAVoB,OAc1BrH,EAAS1B,EAAS+I,EAAStI,KAAKA,KAAKuI,WACrCd,GAAW,GAfe,sDAiBtBU,KAAMK,SAAN,MAjBsB,mDAkB1Bd,GAAS,GAlBiB,0DAoB3B,CAACH,EAAOtG,IAOX,OALAmD,qBAAU,WACLmD,IAAUI,GACbC,MACC,CAAC3G,EAAU2G,EAAWD,EAAkBJ,IAEpC,CAAEvD,UAASC,QAAOH,QAAOhC,eAAc8F,c,qRCvBhD,IAEMa,GAAYC,cAAW,SAACC,GAAD,MAAY,CACvCC,OAAO,gBACJD,EAAME,YAAYC,GAAG,MAAQ,CAC5BC,MALc,IAMdC,WAAY,IAGhBC,OAAO,gBACJN,EAAME,YAAYC,GAAG,MAAQ,CAC5BC,MAAM,eAAD,OAXS,IAWT,OACLG,WAZc,MAelBC,WAAW,cACTC,YAAaT,EAAMU,QAAQ,IAC1BV,EAAME,YAAYC,GAAG,MAAQ,CAC5BQ,QAAS,SAGbC,QAAQ,aACNC,SAAU,KACPb,EAAMc,OAAOF,SAElBG,YAAa,CACXX,MA1BgB,KA4BlBY,QAAS,CACPZ,MAAO,IACPa,SAAU,EACVC,QAASlB,EAAMU,QAAQ,QAkGZS,GA9FU,SAACC,GAAY,IAAD,EAEHvC,mBAAS,IAFN,oBAE5BwC,EAF4B,KAElBjG,EAFkB,OAGwBuD,GAAS0C,GAA5DlG,EAH2B,EAG3BA,MAAOE,EAHoB,EAGpBA,QAASC,EAHW,EAGXA,MAAOnC,EAHI,EAGJA,aAAc8F,EAHV,EAGUA,UAMrCqC,EAAWF,EAAXE,OACFC,EAAUzB,KACVE,EAAQwB,eAXqB,EAYCC,IAAM5C,UAAS,GAZhB,oBAY5B6C,EAZ4B,KAYhBC,EAZgB,KAa7BrJ,EAAWC,cAEXqJ,EAAqB,WACzBD,GAAeD,IAQXzB,EACJ,6BACE,yBAAKhD,UAAWsE,EAAQX,UACxB,kBAAClG,EAAA,EAAD,MACA,kBAAC,EAAD,CAAUS,MAAOA,EAAOC,YAAaA,EAAaC,QAASA,EAASC,MAAOA,KAIzE2C,OAAuB4D,IAAXP,EAAuB,kBAAMA,IAASQ,SAASC,WAAOF,EAExE,OACE,kBAACG,GAAD,CAAS/E,UAAWsE,EAAQU,MAC1B,kBAACC,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CAAQC,SAAS,QAAQnF,UAAWsE,EAAQjB,QAC1C,kBAAC+B,GAAA,EAAD,KACE,kBAACjI,EAAA,EAAD,CACEE,MAAM,UACNE,aAAW,cACXD,KAAK,QACLf,QAASoI,EACT3E,UAAWsE,EAAQf,YAEnB,kBAAC8B,GAAA,EAAD,OAEF,kBAAC,GAAD,CAAkB3H,QAAQ,KAAK4H,QAAM,GAArC,gBAGA,kBAACC,GAAD,CAAcC,UAAWtH,EAAMuH,OAAO,SAAA5L,GAAC,OAAIA,EAAEE,aAAYwC,QA9CzC,WACtByF,KA6CyFtE,QAAQ,aAA3F,aAGA,kBAACgI,GAAA,EAAD,CAAQnJ,QAnCM,WACpBlB,EAASrB,KACTqB,EAASlC,EAAW,QAiCkBuE,QAAQ,YAAYL,MAAM,aAA1D,iBAKJ,yBAAK2C,UAAWsE,EAAQtB,OAAQzF,aAAW,mBACzC,kBAACoI,GAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OAC1B,kBAACC,GAAA,EAAD,CACE9E,UAAWA,EACXtD,QAAQ,YACRqI,OAA4B,QAApBhD,EAAM9B,UAAsB,QAAU,OAC9C+E,KAAMvB,EACNwB,QAAStB,EACTL,QAAS,CACP4B,MAAO5B,EAAQR,cAGhBd,IAGL,kBAAC2C,GAAA,EAAD,CAAQQ,QAAM,EAACN,eAAe,OAC5B,kBAACC,GAAA,EAAD,CACExB,QAAS,CACP4B,MAAO5B,EAAQR,aAEjBpG,QAAQ,YACRsI,MAAI,GAEHhD,KAIP,0BAAMhD,UAAWsE,EAAQP,SACvB,yBAAK/D,UAAWsE,EAAQX,UACxB,kBAAC,GAAD,CAAaxJ,KAAM+B,EAAckK,MAAI,OAQvCrB,GAAUtK,IAAOG,IAAV,MAIPyF,GAAmB5F,YAAO6F,IAAP7F,CAAH,MAIhB8K,GAAe9K,YAAOiL,KAAPjL,CAAH,MCxJH4L,OANf,WACE,OACE,kBAAC,GAAD,OCOgBC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2D,aCdOC,GAAcC,aAAgB,CACzCvK,SAAU7B,EACV2B,aAAc3C,ICHHqN,GAAQC,YAAe,CAClCrN,QAASkN,KCILI,GAAcjC,SAASkC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,IACf,kBAAC,GAAD,OAEFE,IHsHI,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnJ,GACLoJ,QAAQpJ,MAAMA,EAAMqJ,a,mBIzI5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.9dc31a48.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst selectedPostSlice = createSlice({\n  name: 'selectedPost',\n  initialState: '',\n  reducers: {\n    selectPost: (state, action) => {\n      return action.payload;\n    },\n  }\n})\n\nexport const {\n  reducer: selectedPostReducer,\n  actions: { selectPost }\n} = selectedPostSlice;","import { createSlice } from '@reduxjs/toolkit';\n\nconst AllPostsSlice = createSlice({\n  name: 'allPosts',\n  initialState: [],\n  reducers: {\n    addPosts: (state, action) => {\n      return [...state, ...action.payload.map(p => ({ ...p, read: false, dismissed: false}))];\n    },\n    dismissPosts: (state) => {\n      return [];\n    },\n    dismissSinglePost: (state, action) => {\n      const postToDismiss = state.find(post => post.data.id === action.payload);\n      postToDismiss.dismissed = true;\n    },\n    markAsRead: (state, action) => {\n      const readPost = state.find(post => post.data.id === action.payload);\n      readPost.read = true;\n    },\n  }\n});\n\nexport const {\n  reducer: allPostsReducer,\n  actions: { addPosts, dismissPosts, markAsRead, dismissSinglePost }\n} = AllPostsSlice;","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { ListItem, Divider, ListItemText, ListItemAvatar, Avatar, IconButton, ListItemSecondaryAction, Tooltip} from '@material-ui/core';\nimport { Clear } from '@material-ui/icons';\nimport defaultThumbnail from '../assets/images/reddit.png';\nimport { getFormattedCreationDate } from '../utils';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { selectPost } from \"../redux/selectedPostSlice\";\nimport { dismissSinglePost, markAsRead } from \"../redux/allPostsSlice\";\nimport { has } from 'lodash';\n\nconst ReadTitle = styled.span`\n  color: #9b9b9b;\n`;\n\nconst ListItemWrapper = styled.div`\n  transition: max-height 0.15s ease-in-out;\n  max-height: ${({dismissed}) => dismissed ? 0 : 999}px;\n  overflow: hidden;\n`;\n\nconst thumbnailTypes = ['spoiler', 'self', 'default', 'nsfw'];\n\nconst PostListItem = forwardRef(({ post: {\n      data: {\n        id,\n        title,\n        thumbnail,\n        author,\n        created_utc,\n      },\n      read,\n      dismissed,\n    }\n  }, ref) => {\n  const dispatch = useDispatch();\n  const creationDate = getFormattedCreationDate(created_utc);\n  const hasDefaultThumbnails = thumbnailTypes.includes(thumbnail);\n  const selectedPost = useSelector(state => state.allPosts.find(p => {\n    return p.data.id === state.selectedPost;\n  }));\n  const handleCurrentPost = () => {\n    dispatch(selectPost(id));\n    dispatch(markAsRead(id));\n  }\n  const handleDismissPost = () => {\n    if(has(selectedPost, 'data.id') && selectedPost.data.id === id){\n      dispatch(selectPost(null));\n    }\n    dispatch(dismissSinglePost(id));\n  }\n\n  return (\n      <ListItemWrapper dismissed={dismissed}>\n        <ListItem ref={ref} button onClick={handleCurrentPost} alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <Avatar alt=\"thumbnail\" src={hasDefaultThumbnails ? defaultThumbnail : thumbnail} />\n          </ListItemAvatar>\n\n          <ListItemText\n            primary={\n              (read ? <ReadTitle>{title}</ReadTitle> : title)\n            }\n            secondary={\n              <>\n                by <b>u/{author}</b> {creationDate}\n              </>\n            }\n          />\n          <ListItemSecondaryAction>\n            <Tooltip title=\"Dismiss\">\n              <IconButton onClick={handleDismissPost} color=\"secondary\" edge=\"end\" aria-label=\"delete\">\n                <Clear />\n              </IconButton>\n            </Tooltip>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <Divider variant=\"inset\" component=\"li\" />\n      </ListItemWrapper>\n  );\n});\n\nexport default PostListItem;","import { fromUnixTime, formatDistanceStrict } from 'date-fns';\n\nexport const getFormattedCreationDate = (time) => {\n  const creationDate = fromUnixTime(time);\n  const timePast = formatDistanceStrict(creationDate, Date.now(), {\n    roundingMethod: 'floor'\n  });\n  return `${timePast} ago`;\n};","import React, { useRef, useEffect} from 'react';\nimport { last } from 'lodash';\nimport { PostListItem } from \"../components\";\nimport { List, CircularProgress, ListItem } from '@material-ui/core';\nimport styled from \"styled-components\";\n\nconst StyledList = styled(List)`\n  width: 100%;\n`;\n\nconst StyledListItem = styled(ListItem)`\n  margin-left: 40%;\n`;\n\nconst Loading = () => (\n  <StyledListItem alignItems=\"center\">\n    <CircularProgress />\n  </StyledListItem>\n);\n\nconst PostList = ({posts, setAfterTag, loading, error}) => {\n\n  const lastElementRef = useRef();\n\n  useEffect(() => {\n    if (loading) return\n    const lastElement = lastElementRef.current;\n    if (!lastElement) return\n\n    const observer = (new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        setAfterTag(last(posts).data.name);\n      }\n    }));\n\n    observer.observe(lastElementRef.current);\n\n    return () => {\n      if (!lastElement) return\n      observer.unobserve(lastElement);\n    }\n\n  },[loading, posts, setAfterTag])\n\n  return (\n    <StyledList>\n      {posts.map((post, i) => {\n        if (posts.length === i + 1) {\n          return (\n            <PostListItem key={post.data.id} ref={lastElementRef} post={post} />\n          );\n        } else {\n          return <PostListItem key={post.data.id} post={post} />\n        }\n      })}\n      <div>{loading && <Loading />}</div>\n\n      <div>{error && 'Error'}</div>\n    </StyledList>\n  )\n\n};\n\nexport default PostList;","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  Typography,\n} from '@material-ui/core';\nimport styled from \"styled-components\";\n\nconst StyledImg = styled.img`\n  max-width: 100%; \n  display:block; \n  height: auto;\n`;\n\nconst Content = ({ post }) => {\n\n  const { post_hint, selftext, title, url, secure_media, preview } = post.data;\n\n  switch (post_hint) {\n    case 'image':\n      return <StyledImg src={url} alt={title} />;\n    case 'hosted:video':\n    case 'link':\n    case 'rich:video':\n      const { fallback_url } = preview?.reddit_video_preview ??\n      secure_media?.reddit_video ?? { fallback_url: null };\n      if (!fallback_url)\n        return <StyledTypography> There was an error displaying the video </StyledTypography>\n      return (\n        <div className=\"embed-responsive embed-responsive-1by1\">\n          <video controls autoPlay loop className=\"embed-responsive-item\">\n            <source src={fallback_url} type=\"video/mp4\" />\n          </video>\n        </div>\n      );\n    default:\n      return <>{<Typography>{selftext}</Typography>}</>;\n  }\n};\n\nconst SelectPostDetails = () => {\n  return (\n    <CenteredTextCard >\n      <CardHeader\n        title={'Select a post to see details'}\n      />\n    </CenteredTextCard>\n  );\n}\n\n\nconst PostDetails = ({post}) => {\n  if(!post) return <SelectPostDetails />;\n\n  const { title, subreddit_name_prefixed, author, num_comments, score } = post.data;\n\n  return (\n    <Container>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        >\n        <Card>\n          <CardHeader\n            title={title}\n            subheader={`${subreddit_name_prefixed} Posted by ${author}`}\n          />\n          <StyledCardMedia>\n            <Content post={post}/>\n          </StyledCardMedia>\n          <CardContent>\n            <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n              With <strong>{num_comments}</strong> comments and a score of <strong>{score}</strong>\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default PostDetails;\n\nconst StyledCardMedia = styled(CardMedia)`\n  text-align: -webkit-center;\n  margin: 20px 20px;\n`;\n\nconst StyledTypography = styled(Typography)`\n  text-align: -webkit-center;\n  margin: 10px 0;\n`;\n\nconst CenteredTextCard = styled(Card)`\n  text-align: -webkit-center;\n`;\n","import { useEffect, useRef } from 'react';\n\nconst usePrevious = value => {\n  const ref = useRef();\n\n  useEffect(() => {\n  ref.current = value;\n}, [value]);\n\n  return ref.current;\n};\n\nexport default usePrevious;\n","import {useCallback, useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { addPosts } from \"../redux/allPostsSlice\";\nimport usePrevious from \"./usePrevious\";\n\nconst usePosts = (after) => {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n  const previousAfterTag = usePrevious(after);\n  const posts = useSelector(state => state.allPosts);\n  const selectedPost = useSelector(state => state.allPosts.find(p => {\n      return p.data.id === state.selectedPost;\n  }\n\n  ))\n  const dispatch = useDispatch();\n\n  const loadPosts = useCallback(async() => {\n    const searchParams = new URLSearchParams({\n      limit: '50'\n    });\n    if (after) {\n      searchParams.set('after', after);\n    }\n    try {\n      setLoading(true)\n      setError(false)\n      const response = await axios({\n        method: 'GET',\n        url: `https://www.reddit.com/top.json?${searchParams.toString()}`,\n      })\n      dispatch(addPosts(response.data.data.children));\n      setLoading(false)\n    } catch (e) {\n      if (axios.isCancel(e)) return\n      setError(true)\n    }\n  }, [after, dispatch]);\n\n  useEffect(() => {\n    if(after === previousAfterTag) return ;\n    loadPosts();\n  }, [dispatch, loadPosts, previousAfterTag, after])\n\n  return { loading, error, posts, selectedPost, loadPosts }\n}\n\nexport default usePosts;\n","import React, {useState} from 'react';\nimport { AppBar,\n  CssBaseline,\n  Divider,\n  Drawer,\n  Hidden,\n  Button,\n  IconButton,\n  Toolbar,\n  Typography,\n  makeStyles,\n  useTheme\n} from '@material-ui/core';\nimport { Menu }  from '@material-ui/icons';\nimport {PostDetails, PostList} from \"../components\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { dismissPosts } from \"../redux/allPostsSlice\";\nimport { usePosts } from \"../hooks\";\nimport { selectPost } from \"../redux/selectedPostSlice\";\n\n\nconst drawerWidth = 500;\n//necessary to useTheme\nconst useStyles = makeStyles((theme) => ({\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  toolbar: {\n    minWidth: 580,\n    ...theme.mixins.toolbar\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    width: 600,\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nconst ResponsiveDrawer = (props) =>  {\n\n  const [afterTag, setAfterTag] = useState('');\n  const { posts, loading, error, selectedPost, loadPosts } = usePosts(afterTag);\n\n  const handleLoadPosts = () => {\n    loadPosts();\n  }\n\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const dispatch = useDispatch();\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const handleDismiss = () => {\n    dispatch(dismissPosts());\n    dispatch(selectPost(null));\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <PostList posts={posts} setAfterTag={setAfterTag} loading={loading} error={error} />\n    </div>\n  );\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <RootDiv className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <Menu />\n          </IconButton>\n          <StyledTypography variant=\"h6\" noWrap>\n            Reddit posts\n          </StyledTypography>\n          <StyledButton disabled={!posts.every( p => p.dismissed)} onClick={handleLoadPosts} variant=\"contained\">\n            Load More\n          </StyledButton>\n          <Button onClick={handleDismiss} variant=\"contained\" color=\"secondary\">\n            Dismiss All\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <PostDetails post={selectedPost} flex />\n      </main>\n    </RootDiv>\n  );\n}\n\nexport default ResponsiveDrawer;\n\nconst RootDiv = styled.div`\n  display: flex;\n`;\n\nconst StyledTypography = styled(Typography)`\n  flex-grow: 1;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-right: 20px;\n`;","import React from 'react';\nimport { ResponsiveDrawer } from './components';\n\nfunction App() {\n  return (\n    <ResponsiveDrawer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { selectedPostReducer } from './selectedPostSlice';\nimport { allPostsReducer } from './allPostsSlice';\n\nexport const rootReducer = combineReducers({\n  allPosts: allPostsReducer,\n  selectedPost: selectedPostReducer\n});","import { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './rootReducer';\n\nexport const store = configureStore({\n  reducer: rootReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/reddit.9006f32f.png\";"],"sourceRoot":""}